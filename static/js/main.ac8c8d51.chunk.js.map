{"version":3,"sources":["components/InputSection/InputType.js","components/InputSection/InputSection.js","components/OutputSection/OutputDegree.js","components/OutputSection/OutputSection.js","App.js","reportWebVitals.js","index.js"],"names":["InputType","props","className","type","name","value","degreeType","onChange","onSelectChange","InputSection","degreeTypes","onSubmit","event","preventDefault","autoFocus","setDegree","target","maxLength","setType","OutputDegree","degree","OutputSection","inputStatus","status","temperature","celsiusDegree","fahrenheitDegree","kelvinDegree","parseFloat","toFixed","toString","App","useState","setStatus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac8c8d51.chunk.js","sourcesContent":["import './InputType.css'\n\nconst InputType = (props) => {\n  const changeHandler = () => {\n    props.onSelectChange()\n  }\n  return (\n    <div className='input-type'>\n      <input type='radio' name='type' value={props.degreeType} onChange={changeHandler} />\n      <p>{props.degreeType}</p>\n    </div>\n  )\n}\n\nexport default InputType\n","import './InputSection.css'\n\nimport InputType from './InputType'\n\nconst InputSection = (props) => {\n  const degreeTypes = ['Celsius', 'Fahrenheit', 'Kelvin']\n  const submitHandler = (event) => {\n    event.preventDefault()\n  }\n  const degreeHandler = (event) => {\n    props.setDegree(event.target.value)\n  }\n  const celsiusCheckedHandler = () => {\n    props.setType('Celsius')\n  }\n  const fahrenheitCheckedHandler = () => {\n    props.setType('Fahrenheit')\n  }\n  const kelvinCheckedHandler = () => {\n    props.setType('Kelvin')\n  }\n\n  return (\n    <div className='input-section'>\n      <form onSubmit={submitHandler}>\n        <div className='degree-section'>\n          <label>Degrees</label>\n          <input type='string' autoFocus onChange={degreeHandler} maxLength='5' />\n        </div>\n        <div className='type-section'>\n          <label>Type</label>\n          <InputType degreeType={degreeTypes[0]} onSelectChange={celsiusCheckedHandler} />\n          <InputType degreeType={degreeTypes[1]} onSelectChange={fahrenheitCheckedHandler} />\n          <InputType degreeType={degreeTypes[2]} onSelectChange={kelvinCheckedHandler} />\n        </div>\n        {/* <div className='btn-section'>\n          <button type='submit'>Convert</button>\n        </div> */}\n      </form>\n    </div>\n  )\n}\n\nexport default InputSection\n","import './OutputDegree.css'\n\nconst OutputDegree = (props) => {\n  return (\n    <div className='degree'>\n      <h1>{props.degree}</h1>\n    </div>\n  )\n}\n\nexport default OutputDegree\n","import './OutputSection.css'\n\nimport OutputDegree from './OutputDegree'\n\nconst OutputSection = (props) => {\n  const inputStatus = props.status\n  const temperature = {\n    celsiusDegree: '',\n    fahrenheitDegree: '',\n    kelvinDegree: ''\n  }\n  if (inputStatus.type === 'Celsius' && inputStatus.degree) {\n    temperature.celsiusDegree = parseFloat(inputStatus.degree).toFixed(2).toString() + '℃'\n    temperature.fahrenheitDegree = ((parseFloat(inputStatus.degree) * 1.8) + 32).toFixed(2).toString() + '℉'\n    temperature.kelvinDegree = (parseFloat(inputStatus.degree) + 273.15).toFixed(2).toString() + 'K'\n  }\n  if (inputStatus.type === 'Fahrenheit' && inputStatus.degree) {\n    temperature.celsiusDegree = ((parseFloat(inputStatus.degree) - 32) / 1.8).toFixed(2).toString() + '℃'\n    temperature.fahrenheitDegree = parseFloat(inputStatus.degree).toFixed(2).toString() + '℉'\n    temperature.kelvinDegree = (((parseFloat(inputStatus.degree) - 32) / 1.8) + 273.15).toFixed(2).toString() + 'K'\n  }\n\n  if (inputStatus.type === 'Kelvin' && inputStatus.degree) {\n    temperature.celsiusDegree = (parseFloat(inputStatus.degree) - 273.15).toFixed(2).toString() + '℃'\n    temperature.fahrenheitDegree = (((parseFloat(inputStatus.degree) - 273.15) * 1.8) + 32).toFixed(2).toString() + '℉'\n    temperature.kelvinDegree = parseFloat(inputStatus.degree).toFixed(2).toString() + 'K'\n  }\n\n  return (\n    <div className='output-section'>\n      <label>Result</label>\n      <div className='degrees'>\n        <OutputDegree degree={temperature.celsiusDegree} />\n        <OutputDegree degree={temperature.fahrenheitDegree} />\n        <OutputDegree degree={temperature.kelvinDegree} />\n      </div>\n    </div>\n  )\n}\n\nexport default OutputSection\n","import InputSection from './components/InputSection/InputSection'\nimport OutputSection from './components/OutputSection/OutputSection'\nimport { useState } from 'react'\nimport './App.css'\n\nfunction App () {\n  const [status, setStatus] = useState({\n    type: '',\n    degree: ''\n  })\n  const typeHandler = (type) => {\n    return setStatus({\n      ...status,\n      type\n    })\n  }\n  const degreeHandler = (degree) => {\n    return setStatus({\n      ...status,\n      degree\n    })\n  }\n  return (\n    <div className='container'>\n      <div className='main-section'>\n        <OutputSection status={status} />\n        <InputSection setType={typeHandler} setDegree={degreeHandler} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}